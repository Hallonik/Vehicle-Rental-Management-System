/*package com.example.vehicle.rental.controller;


import com.example.vehicle.rental.dto.CredDTO;
import com.example.vehicle.rental.dto.UserDto;
import com.example.vehicle.rental.service.UserService;
import com.stripe.exception.StripeException;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/admin")
@Tag(name = "AdminController", description = "Endpoints for Admin level operations")
public class AdminController {

    public UserService userService;

    public AdminController(UserService userService) {
        this.userService = userService;
    }

    

    @PostMapping(
    value = "/SignUp",
    consumes =  "application/json",
    produces =  "application/json"
    )
    public ResponseEntity<?> addUser(@RequestBody UserDto user) throws StripeException {

        return userService.addUser(user);

    }
    
    @PostMapping("/SignIn")
    public ResponseEntity<?> signIn(@RequestBody CredDTO credDto) {
        // authenticate() should return a JWT token wrapped in the response
        return userService.authenticate(credDto);
    }
}
*/

package com.example.vehicle.rental.controller;

import com.example.vehicle.rental.dto.CredDTO;
import com.example.vehicle.rental.dto.UserDto;
import com.example.vehicle.rental.security.JwtService;
import com.example.vehicle.rental.service.UserService;
import com.stripe.exception.StripeException;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/admin")
@Tag(name = "AdminController", description = "Endpoints for Admin level operations")
public class AdminController {

    private final UserService userService;
    private final AuthenticationManager authenticationManager;
    private final JwtService jwtService;

    public AdminController(UserService userService,
                           AuthenticationManager authenticationManager,
                           JwtService jwtService) {
        this.userService = userService;
        this.authenticationManager = authenticationManager;
        this.jwtService = jwtService;
    }
    
    @PostMapping("/Authenticate")
    public ResponseEntity<?> authenticate(@RequestBody CredDTO credDto) {
        return userService.authenticate(credDto);
    }

    // SIGN IN
    @PostMapping("/SignIn")
    public ResponseEntity<?> signIn(@RequestBody CredDTO credDto) {
        // Authenticate user
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(credDto.getUserName(), credDto.getPassword())
        );

        UserDetails userDetails = (UserDetails) authentication.getPrincipal();

        // Generate JWT token
        String token = jwtService.generateToken(userDetails);

        Map<String, Object> response = new HashMap<>();
        response.put("token", token);
        response.put("username", userDetails.getUsername());
        response.put("roles", userDetails.getAuthorities());

        return ResponseEntity.ok(response);
    }

    // SIGN UP + Auto Token Generation
    @PostMapping(value = "/SignUp", consumes = "application/json", produces = "application/json")
    public ResponseEntity<?> signUp(@RequestBody UserDto user) throws StripeException {
        userService.addUser(user); // Save user first

        // Auto authenticate after signup
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(user.getUserName(), user.getPassword())
        );

        UserDetails userDetails = (UserDetails) authentication.getPrincipal();

        // Generate JWT token
        String token = jwtService.generateToken(userDetails);

        Map<String, Object> response = new HashMap<>();
        response.put("token", token);
        response.put("username", userDetails.getUsername());
        response.put("roles", userDetails.getAuthorities());

        return ResponseEntity.ok(response);
    }
}

